(function () {
	var a = {}.hasOwnProperty;
	(function (b) {
		var c, d, e, f, g;
		return (
			(d = {
				events: {
					mouseWheel: !0,
					doubleClick: !0,
					drag: !0,
					dragCursor: 'move',
				},
				animationTime: 300,
				zoomFactor: 0.15,
				maxZoom: 5,
				panFactor: 0,
				initialViewBox: null,
			}),
			(e = { x: 1e3, y: 1e3, width: 1500, height: 1e3 }),
			(c = function (a, c) {
				var d, e, f, g;
				return (
					(g = b.extend({}, a)),
					(e = Math.abs(c.x2 - c.x)),
					(d = Math.abs(c.y2 - c.y)),
					g.width > e
						? g.height > d
							? e > d
								? ((f = d / g.height), (g.height = d), (g.width *= f))
								: ((f = e / g.width), (g.width = e), (g.height *= f))
							: ((f = e / g.width), (g.width = e), (g.height *= f))
						: g.height > d &&
						  ((f = d / g.height), (g.height = d), (g.width *= f)),
					g.x < c.x && (g.x = c.x),
					g.y < c.y && (g.y = c.y),
					g.x + g.width > c.x2 && (g.x = c.x2 - g.width),
					g.y + g.height > c.y2 && (g.y = c.y2 - g.height),
					g
				);
			}),
			(g = function (a) {
				var b;
				return (
					(b = a.replace('s+', ' ').split(' ')),
					(b = {
						x: parseFloat(b[0]),
						y: parseFloat(b[1]),
						width: parseFloat(b[2]),
						height: parseFloat(b[3]),
					})
				);
			}),
			(f = function (a, b) {
				var c, d, e;
				return (
					(d = { x: null, y: null }),
					'touchstart' === b.type || 'touchmove' === b.type
						? null != b.originalEvent && null == b.touches
							? ((d.x = b.originalEvent.touches[0].clientX),
							  (d.y = b.originalEvent.touches[0].clientY))
							: ((d.x = b.touches[0].clientX), (d.y = b.touches[0].clientY))
						: null == b.clientX
						? ((d.x = b.originalEvent.clientX), (d.y = b.originalEvent.clientY))
						: ((d.x = b.clientX), (d.y = b.clientY)),
					(e = a.createSVGPoint()),
					(e.x = parseInt(d.x, 10)),
					(e.y = parseInt(d.y, 10)),
					(c = a.getScreenCTM()),
					(c = c.inverse()),
					(e = e.matrixTransform(c)),
					e
				);
			}),
			(b.fn.svgPanZoom = function (h) {
				var i;
				return (
					(i = []),
					this.each(function () {
						var j, k, l, m, n, o, p, q, r, s;
						if (
							((n = b.extend(!0, {}, d, h)),
							(n.$svg = b(this)),
							null == n.animationTime && (n.animationTime = 0),
							n.$svg[0].setAttribute('preserveAspectRatio', 'xMidYMid meet'),
							(q = b.extend({}, this.viewBox.baseVal)),
							null == q.x && (q.x = 0),
							null == q.y && (q.y = 0),
							null == q.width && (q.width = 0),
							null == q.height && (q.height = 0),
							null == n.initialViewBox)
						)
							0 === q.x &&
								0 === q.y &&
								0 === q.width &&
								0 === q.height &&
								(q = e);
						else if ('string' == typeof n.initialViewBox)
							q = g(n.initialViewBox);
						else if ('object' == typeof n.initialViewBox)
							q = b.extend({}, e, n.initialViewBox);
						else throw 'initialViewBox is of invalid type';
						for (m in ((s = q),
						(n.initialViewBox = b.extend({}, s)),
						null == n.limits &&
							((l = 0.15 * s.width),
							(r = 0.15 * s.height),
							(n.limits = {
								x: s.x - l,
								y: s.y - r,
								x2: s.x + s.width + l,
								y2: s.y + s.height + r,
							})),
						(n.reset = function () {
							var a;
							(a = this.initialViewBox),
								this.setViewBox(a.x, a.y, a.width, a.height, 0);
						}),
						(n.getViewBox = function () {
							return b.extend({}, s);
						}),
						(j = b('<div></div>')),
						(n.setViewBox = function (a, b, d, e, f) {
							null == f && (f = this.animationTime),
								0 < f &&
									j.css({
										left: s.x + 'px',
										top: s.y + 'px',
										width: s.width + 'px',
										height: s.height + 'px',
									}),
								(s = {
									x: null == a ? s.x : a,
									y: null == b ? s.y : b,
									width: d ? d : s.width,
									height: e ? e : s.height,
								}),
								(s = c(s, this.limits)),
								0 < f
									? j.stop().animate(
											{ left: s.x, top: s.y, width: s.width, height: s.height },
											{
												duration: f,
												easing: 'linear',
												step: function () {
													var a;
													(a = j),
														this.$svg[0].setAttribute(
															'viewBox',
															a.css('left').slice(0, -2) +
																' ' +
																a.css('top').slice(0, -2) +
																' ' +
																a.css('width').slice(0, -2) +
																' ' +
																a.css('height').slice(0, -2),
														);
												}.bind(this),
											},
									  )
									: this.$svg[0].setAttribute(
											'viewBox',
											s.x + ' ' + s.y + ' ' + s.width + ' ' + s.height,
									  );
						}),
						(n.panLeft = function (a, b) {
							null == a && (a = this.panFactor),
								null == b && (b = this.animationTime),
								this.panRight(-a, b);
						}),
						(n.panRight = function (a, b) {
							null == a && (a = this.panFactor),
								null == b && (b = this.animationTime),
								this.setViewBox(s.x + a, null, null, null, b);
						}),
						(n.panUp = function (a, b) {
							null == a && (a = this.panFactor),
								null == b && (b = this.animationTime),
								this.panDown(-a, b);
						}),
						(n.panDown = function (a, b) {
							null == a && (a = this.panFactor),
								null == b && (b = this.animationTime),
								this.setViewBox(null, s.y + a, null, null, b);
						}),
						(n.zoomIn = function (a, b) {
							null == a && (a = this.zoomFactor),
								null == b && (b = this.animationTime),
								this.zoomOut(-a, b);
						}),
						(n.zoomOut = function (a, b) {
							var c, d, e;
							(null == a && (a = this.zoomFactor),
							null == b && (b = this.animationTime),
							0 !== a) &&
								(0 > a
									? ((a = Math.abs(a)),
									  (e = s.width / (1 + a)),
									  (d = s.height / (1 + a)))
									: ((e = s.width * (1 + a)), (d = s.height * (1 + a))),
								(c = { x: s.x + s.width / 2, y: s.y + s.height / 2 }),
								this.setViewBox(c.x - e / 2, c.y - e / 2, e, d, b));
						}),
						(n.setCenter = function (a, b, c) {
							null == c && (c = this.animationTime),
								this.setViewBox(
									a - s.width / 2,
									b - s.height / 2,
									s.width,
									s.height,
									c,
								);
						}),
						n))
							a.call(n, m) &&
								((p = n[m]), 'function' == typeof p && (n.key = p.bind(n)));
						n.$svg.on(
							'mousewheel DOMMouseScroll MozMousePixelScroll',
							function (a) {
								var b, c, d, e, g, h, i, j, k, l, m;
								(b = parseInt(
									a.originalEvent.wheelDelta || -a.originalEvent.detail,
								)),
									0 === b ||
										!0 !== n.events.mouseWheel ||
										((k = this.getViewBox()),
										a.preventDefault(),
										a.stopPropagation(),
										(j = f(this.$svg[0], a)),
										(l = { x: s.x + s.width / 2, y: s.y + s.height / 2 }),
										(i = { x: l.x - j.x, y: l.y - j.y }),
										0 < b
											? (this.zoomIn(void 0, 0),
											  (d = this.initialViewBox.width / this.maxZoom),
											  (c = this.initialViewBox.height / this.maxZoom),
											  s.width < d &&
													((m = d / s.width), (s.width = d), (s.height *= m)),
											  s.height < c &&
													((m = c / s.height), (s.height = c), (s.width *= m)))
											: this.zoomOut(void 0, 0),
										(e = f(this.$svg[0], a)),
										(h = { x: l.x + (j.x - e.x), y: l.y + (j.y - e.y) }),
										this.setCenter(h.x, h.y, 0),
										(g = this.getViewBox()),
										this.setViewBox(k.x, k.y, k.width, k.height, 0),
										this.setViewBox(g.x, g.y, g.width, g.height));
							}.bind(n),
						),
							n.$svg.dblclick(
								function (a) {
									if (!0 === n.events.doubleClick)
										return (
											a.preventDefault(), a.stopPropagation(), this.zoomIn()
										);
								}.bind(n),
							),
							n.$svg[0].addEventListener(
								'click',
								function (a) {
									var b;
									if (b)
										return (b = !1), a.stopPropagation(), a.preventDefault();
								},
								!0,
							),
							(k = !1),
							(o = !1),
							n.$svg.on(
								'mousedown touchstart',
								function (a) {
									var c, d, e, g, h, i;
									k ||
										!0 !== n.events.drag ||
										('mousedown' === a.type && 1 !== a.which) ||
										((k = !0),
										(o = !1),
										a.preventDefault(),
										a.stopPropagation(),
										(e = b.extend({}, s)),
										(c = b(window.document.body)),
										(d = c[0]),
										(i = c.css('cursor')),
										null != this.events.dragCursor &&
											c.css('cursor', this.events.dragCursor),
										(g = function (b) {
											var c, d;
											b.stopPropagation(),
												(d = f(this.$svg[0], a)),
												(c = f(this.$svg[0], b)),
												3 <
													Math.sqrt(
														Math.pow(a.pageX + b.pageX, 2) +
															Math.pow(a.pageY + b.pageY, 2),
													) && (o = !0),
												this.setViewBox(
													e.x + d.x - c.x,
													e.y + d.y - c.y,
													null,
													null,
													0,
												);
										}.bind(n)),
										(h = function (a) {
											('mouseout' === a.type && a.target !== a.currentTarget) ||
												(a.preventDefault(),
												a.stopPropagation(),
												d.removeEventListener('mousemove', g, !0),
												d.removeEventListener('touchmove', g, !0),
												d.removeEventListener('mouseup', h, !0),
												d.removeEventListener('touchend', h, !0),
												d.removeEventListener('touchcancel', h, !0),
												d.removeEventListener('mouseout', h, !0),
												null != this.events.dragCursor && c.css('cursor', i),
												(k = !1));
										}.bind(n)),
										d.addEventListener('mousemove', g, !0),
										d.addEventListener('touchmove', g, !0),
										d.addEventListener('mouseup', h, !0),
										d.addEventListener('touchend', h, !0),
										d.addEventListener('touchcancel', h, !0),
										d.addEventListener('mouseout', h, !0));
								}.bind(n),
							),
							n.setViewBox(q.x, q.y, q.width, q.height, 0),
							i.push(n);
					}),
					0 === i.length ? null : 1 === i.length ? i[0] : i
				);
			})
		);
	})(jQuery);
}.call(this),
	'use strict',
	(function () {
		function a() {
			for (let a = 0; a < i.length; a++) {
				const c = i[a],
					e = c.element,
					f = c.destination,
					g = c.place,
					h = c.breakpoint,
					k = '_dynamic_adapt_' + h;
				if (!j[a].matches)
					e.classList.contains(k) && (b(e), e.classList.remove(k));
				else if (!e.classList.contains(k)) {
					let a = d(f)[g];
					'first' === g
						? (a = d(f)[0])
						: 'last' === g && (a = d(f)[d(f).length]),
						f.insertBefore(e, f.children[a]),
						e.classList.add(k);
				}
			}
			f();
		}
		function b(a) {
			const b = a.getAttribute('data-da-index'),
				c = g[b],
				e = c.parent,
				f = c.index,
				h = d(e, !0)[f];
			e.insertBefore(a, e.children[h]);
		}
		function c(a) {
			var b = Array.prototype.slice.call(a.parentNode.children);
			return b.indexOf(a);
		}
		function d(a, b) {
			const c = a.children,
				d = [];
			for (let e = 0; e < c.length; e++) {
				const a = c[e];
				b ? d.push(e) : null == a.getAttribute('data-da') && d.push(e);
			}
			return d;
		}
		function e(a) {
			a.sort(function (c, a) {
				return c.breakpoint > a.breakpoint ? -1 : 1;
			}),
				a.sort(function (c, a) {
					return c.place > a.place ? 1 : -1;
				});
		}
		function f() {}
		let g = [],
			h = document.querySelectorAll('[data-da]'),
			i = [],
			j = [];
		if (0 < h.length) {
			let b = 0;
			for (let a = 0; a < h.length; a++) {
				const d = h[a],
					e = d.getAttribute('data-da');
				if ('' != e) {
					const a = e.split(','),
						f = a[1] ? a[1].trim() : 'last',
						h = a[2] ? a[2].trim() : '767',
						j = 'min' === a[3] ? a[3].trim() : 'max',
						k = document.querySelector('.' + a[0].trim());
					0 < a.length &&
						k &&
						(d.setAttribute('data-da-index', b),
						(g[b] = { parent: d.parentNode, index: c(d) }),
						(i[b] = {
							element: d,
							destination: document.querySelector('.' + a[0].trim()),
							place: f,
							breakpoint: h,
							type: j,
						}),
						b++);
				}
			}
			e(i);
			for (let b = 0; b < i.length; b++) {
				const c = i[b],
					d = c.breakpoint,
					e = c.type;
				j.push(window.matchMedia('(' + e + '-width: ' + d + 'px)')),
					j[b].addListener(a);
			}
		}
		a();
	})());
var svgMap = function () {},
	svgMapCountries = new svgMap();
const path = document.querySelectorAll('path');
let dataBase = [];
$.get(`https://disease.sh/v3/covid-19/countries`, function (a) {
	for (let b = 0; b < a.length; b++)
		dataBase.push({
			id: a[b].countryInfo.iso2,
			flag: a[b].countryInfo.flag,
			country: a[b].country,
			cases: a[b].cases,
			deaths: a[b].deaths,
			recovered: a[b].recovered,
			active: a[b].active,
		});
});
const worldMapCovid = document.querySelector('.world-map-covid'),
	el = document.createElement('div');
(el.className = 'statistic-country'),
	path.forEach(a => {
		a.addEventListener('mouseenter', b => {
			b.preventDefault();
			const c = b.target;
			a.style.fill = '#167C51';
			let d = dataBase.find(a => a.id === c.id);
			el.classList.add('show'),
				(el.style.position = 'absolute'),
				el.insertAdjacentHTML(
					'afterbegin',
					`<img src="${d.flag}" alt="${
						d.country
					}" class="statistic-country__flag">
    <span class="statistic-country__name">${d.country}</span>
    <span class="statistic-country__count count-cases">Cases: ${d.cases.toLocaleString()}</span>
    <span class="statistic-country__count count-deaths">Deaths: ${d.deaths.toLocaleString()}</span>
    <span class="statistic-country__count count-recovered">Recovered: ${d.recovered.toLocaleString()}</span>
    <span class="statistic-country__count count-active">Active: ${d.active.toLocaleString()}</span>`,
				),
				worldMapCovid.append(el);
		}),
			a.addEventListener(
				'touchstart',
				b => {
					path.forEach(a => (a.style.fill = 'f44a45')),
						(el.innerHTML = ''),
						el.remove();
					const c = b.target;
					a.style.fill = '#167C51';
					let d = dataBase.find(a => a.id === c.id);
					el.classList.add('show'),
						(el.style.position = 'absolute'),
						el.insertAdjacentHTML(
							'afterbegin',
							`<img src="${d.flag}" alt="${
								d.country
							}" class="statistic-country__flag">
    <span class="statistic-country__name">${d.country}</span>
    <span class="statistic-country__count count-cases">Cases: ${d.cases.toLocaleString()}</span>
    <span class="statistic-country__count count-deaths">Deaths: ${d.deaths.toLocaleString()}</span>
    <span class="statistic-country__count count-recovered">Recovered: ${d.recovered.toLocaleString()}</span>
    <span class="statistic-country__count count-active">Active: ${d.active.toLocaleString()}</span>`,
						),
						worldMapCovid.append(el);
				},
				{ passive: !1 },
			),
			a.addEventListener('mouseleave', () => {
				(a.style.fill = ''), (el.innerHTML = ''), el.remove();
			}),
			a.addEventListener('touchend', () => {
				a.style.fill = '#f44a45';
			});
	});
var examples = $('.map-svg').svgPanZoom();
const controls = document.querySelector('.controls');
controls.addEventListener('click', a => {
	const b = a.target;
	b.closest('.controls__plus') && examples.zoomIn(),
		b.closest('.controls__minus') && examples.zoomOut(),
		b.closest('.controls__reset') && examples.reset();
});
const burger = document.querySelector('.burger'),
	menuMobile = document.querySelector('.menu-mobile');
burger.addEventListener('click', () => {
	burger.classList.toggle('open'), menuMobile.classList.toggle('open');
});
const headerNavigationBtn = document.querySelector('.header-navigation__btn'),
	modalHeaderWindow = document.querySelector('.modal-header-window'),
	feedbackSubmit = document.querySelectorAll('.feedback__submit');
headerNavigationBtn.addEventListener('click', () => {
	modalHeaderWindow.classList.add('show-flex'),
		(document.body.style.overflow = 'hidden'),
		(modalHeaderWindow.style.filter = 'blur(10px)'),
		setTimeout(() => {
			modalHeaderWindow.style.filter = 'blur(0)';
		}, 100);
}),
	modalHeaderWindow.addEventListener('click', a => {
		const b = a.target;
		(b.classList.contains('modal-close') ||
			b.classList.contains('modal-header-window')) &&
			(modalHeaderWindow.classList.remove('show-flex'),
			(document.body.style.overflow = 'scroll'));
	});
const feedbackSubmitAll = Array.from(feedbackSubmit);
const wrapper = document.querySelector('.wrapper');
feedbackSubmitAll.forEach(a => {
	a.addEventListener('click', a => {
		if (document.querySelector('.feedback__input').value !== '') {
			const messageWindow = document.createElement('div');

			messageWindow.classList = 'message-sent';
			messageWindow.insertAdjacentHTML(
				'afterbegin',
				`<p>Message sent!</p>
			<p>The specialist will answer you shortly!</p>`,
			);
			wrapper.append(messageWindow);
			setTimeout(() => {
				messageWindow.remove();
			}, 2000);
		}
	});
});
const countryFlagCases = document.querySelectorAll(
		'.map-data-item__flag-cases',
	),
	countryCases = document.querySelectorAll('.cases .map-data-item__name'),
	countryCasesCounter = document.querySelectorAll(
		'.cases .map-data-item__counter',
	),
	countryDeaths = document.querySelectorAll('.deaths .map-data-item__name'),
	countryDeathsCounter = document.querySelectorAll(
		'.deaths .map-data-item__counter',
	),
	countryFlagDeaths = document.querySelectorAll('.deaths .map-data-item__flag'),
	countryRecovered = document.querySelectorAll(
		'.recovered .map-data-item__name',
	),
	countryRecoveredCounter = document.querySelectorAll(
		'.recovered .map-data-item__counter',
	),
	countryFlagRecovered = document.querySelectorAll(
		'.recovered .map-data-item__flag',
	),
	countryActive = document.querySelectorAll('.active .map-data-item__name'),
	countryActiveCounter = document.querySelectorAll(
		'.active .map-data-item__counter',
	),
	countryFlagActive = document.querySelectorAll('.active .map-data-item__flag'),
	arr = [];
$.get(`https://disease.sh/v3/covid-19/countries`, function (a) {
	for (let b = 0; b < a.length; b++)
		arr.push({
			flag: a[b].countryInfo.flag,
			country: a[b].country,
			cases: a[b].cases,
			deaths: a[b].deaths,
			recovered: a[b].recovered,
			active: a[b].active,
			id: a[b].countryInfo.iso2,
		});
	const b = arr.sort((c, a) => a.cases - c.cases);
	for (let c = 0; 6 > c; c++)
		(countryFlagCases[c].src = b[c].flag),
			(countryCases[c].textContent = b[c].country),
			(countryCasesCounter[c].textContent = b[c].cases.toLocaleString());
	const c = arr.sort((c, a) => a.deaths - c.deaths);
	for (let b = 0; 6 > b; b++)
		(countryFlagDeaths[b].src = c[b].flag),
			(countryDeaths[b].textContent = c[b].country),
			(countryDeathsCounter[b].textContent = c[b].deaths.toLocaleString());
	const d = arr.sort((c, a) => a.recovered - c.recovered);
	for (let b = 0; 6 > b; b++)
		(countryFlagRecovered[b].src = d[b].flag),
			(countryRecovered[b].textContent = d[b].country),
			(countryRecoveredCounter[b].textContent = d[
				b
			].recovered.toLocaleString());
	const e = arr.sort((c, a) => a.active - c.active);
	for (let b = 0; 6 > b; b++)
		(countryFlagActive[b].src = e[b].flag),
			(countryActive[b].textContent = e[b].country),
			(countryActiveCounter[b].textContent = e[b].active.toLocaleString());
});
var mySwiper = new Swiper('.swiper-container', {
	loop: !1,
	navigation: { nextEl: '.header-data__next', prevEl: '.header-data__prev' },
	setWrapperSize: !0,
	initialSlide: 0,
	spaceBetween: 100,
	breakpoints: {
		320: { width: 300 },
		375: { width: 320 },
		380: { width: 370 },
		414: { width: 375, spaceBetween: 160 },
		480: { width: 420 },
		577: { width: 520 },
		600: { width: 520 },
		720: { width: 600 },
		1140: { width: 450 },
		1281: { width: 500 },
		1366: { width: 500 },
		1441: { width: 600 },
	},
});
